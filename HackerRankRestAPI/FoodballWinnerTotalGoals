package CoreConcepts;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Collection;
import java.util.List;
import java.util.stream.IntStream;
import java.util.stream.Stream;

import javax.net.ssl.HttpsURLConnection;

import com.google.gson.Gson;

public class FoodballWinnerTotalGoals {

	/*
	 * Complete the 'getNumDraws' function below.
	 *
	 * The function is expected to return an INTEGER. The function accepts INTEGER
	 * year as parameter.
	 */

	public static int getWinnerTotalGoals(String competition, int year) throws MalformedURLException, IOException {


		// Applying condition
		String baseUrl = "https://jsonmock.hackerrank.com/api/football_competitions";
		String baseUrlMatches = "https://jsonmock.hackerrank.com/api/football_matches";
		// https://jsonmock.hackerrank.com/api/football_matches?competition=UEFA%20Champions%20League&year=2011&team1=Chelsea&page=1

		//String winner = getWinner(String.format(baseUrl + "?name=%s&year=%d", competition, year), Competition.class);
		String winner = "Chelsea";
		System.out.println(winner);
		System.out.println(String.format(baseUrlMatches + "?competition=%s&year=%d&team1=%s", competition, year, winner));
		int homeGoal = getTotalHomeGoals(String.format(baseUrlMatches + "?competition=%s&year=%d&team1=%s", competition, year, winner),
				Match.class);
		int visitingGoal = getTotalVisitingGoals(String.format(baseUrlMatches + "?competition=%s&year=%d&team2=%s", competition, year, winner),
				Match.class);
		
		System.out.println(homeGoal+visitingGoal);
		return homeGoal+visitingGoal;
	}

	// get Winner

	// get totalgoalsforteam1

	public static int getTotalHomeGoals(final String url, final Class<? extends Match> clazz)
			throws IOException {

		Gson gson = new Gson();
		int goal= invokeApi(String.format(url, 1), clazz)
				.getMatchData()
				.stream()
				.mapToInt(match ->Integer.parseInt(match.getTeam1Goals()))
						.sum();
		System.out.println(goal);

		return goal;

	}
	

	public static int getTotalVisitingGoals(final String url, final Class<? extends Match> clazz)
			throws IOException {

		Gson gson = new Gson();
		int goal= invokeApi(String.format(url, 1), clazz)
				.getMatchData()
				.stream()
				.mapToInt(match ->Integer.parseInt(match.getTeam2Goals()))
						.sum();
		System.out.println(goal);

		return goal;

	}

	public static String getWinner(String url, Class<? extends Competition> clazz) {

		final Gson gson = new Gson();

		return gson.fromJson(invokeApi(url), clazz).getCompData().get(0).winner;
	}

	// Hitting API

	public static String invokeApi(String url) {

		final String finalUrl = url.replace(" ", "%20");
		final StringBuilder responseBuilder = new StringBuilder();
		try {
			final HttpsURLConnection connection = (HttpsURLConnection) new URL(finalUrl).openConnection();
			connection.getResponseCode();
			try (BufferedReader bufferedReader = new BufferedReader(
					new InputStreamReader(connection.getInputStream()))) {
				String l;
				while ((l = bufferedReader.readLine()) != null)
					responseBuilder.append(l);
			}
			connection.disconnect();
		} catch (final Exception ex) {
			ex.printStackTrace();
		}
		return responseBuilder.toString();
	}

	// Hitting API
	public static Match invokeApi(String url, Class<? extends Match> clazz) {

		final Gson gson = new Gson();
		final String finalUrl = url.replace(" ", "%20");
		final StringBuilder responseBuilder = new StringBuilder();
		try {
			final HttpsURLConnection connection = (HttpsURLConnection) new URL(finalUrl).openConnection();
			connection.getResponseCode();
			try (BufferedReader bufferedReader = new BufferedReader(
					new InputStreamReader(connection.getInputStream()))) {
				String l;
				while ((l = bufferedReader.readLine()) != null)
					responseBuilder.append(l);
			}
			connection.disconnect();
		} catch (final Exception ex) {
			ex.printStackTrace();
		}
		return gson.fromJson(responseBuilder.toString(), clazz);
	}

}

class Competition {
	private int page;
	private int per_page;
	private int total;
	private int total_pages;

	private List<compData> data;

	public int page() {
		return page;
	}

	public int per_page() {
		return per_page;
	}

	public int total() {
		return total;
	}

	public int getTotalPages() {
		return total_pages;
	}

	public List<compData> getCompData() {
		return data;
	}

}

class compData {
	String name;

	String country;
	int year;
	String winner;
	String runnerup;

	public String getName() {
		return name;
	}

	public String getCountry() {
		return country;
	}

	public int getYear() {
		return year;
	}

	public String getWinner() {
		return winner;
	}

	public String getRunnerUp() {
		return runnerup;
	}

}

class Match {
	private int page;
	private int per_page;
	private int total;
	private int total_pages;

	private List<MatchData> data;

	public int page() {
		return page;
	}

	public int per_page() {
		return per_page;
	}

	public int total() {
		return total;
	}

	public int getTotalPages() {
		return total_pages;
	}

	public List<MatchData> getMatchData() {
		return data;
	}

}

class MatchData {
	String competition;
	int year;
	String round;
	String team1;
	String team2;
	String team1goals;
	String team2goals;

	public String getCompetition() {
		return competition;
	}

	public int getYear() {
		return year;
	}

	public String getRound() {
		return round;
	}

	public String getTeam1() {
		return team1;
	}

	public String getTeam2() {
		return team2;
	}

	public String getTeam1Goals() {
		return team1goals;
	}

	public String getTeam2Goals() {
		return team2goals;
	}

}

/*
 * public class Webservice { public static void main(String[] args) throws
 * IOException { BufferedReader bufferedReader = new BufferedReader(new
 * InputStreamReader(System.in)); BufferedWriter bufferedWriter = new
 * BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));
 * 
 * int year = Integer.parseInt(bufferedReader.readLine().trim());
 * 
 * int result = Result1.getNumDraws(year);
 * 
 * bufferedWriter.write(String.valueOf(result)); bufferedWriter.newLine();
 * 
 * bufferedReader.close(); bufferedWriter.close(); } }
 */
